#!/usr/bin/env python

import getopt
import sys
import os
import ConfigParser
import StringIO
import httplib
import urllib
import shutil
import difflib
import socket
import time


class Pushover:
    PRIORITY_HIGH = 1

    PRIORITY_LOW = -1

    PRIORITY_NORMAL = 0

    priorities = {"high": PRIORITY_HIGH, "normal": PRIORITY_NORMAL, 'low': PRIORITY_LOW}

    verbose = False

    user = None
    token = None
    priority = PRIORITY_NORMAL
    url = None
    message = ""
    title = ""
    configFile = "/etc/pushover-cli.conf"
    quiet = False
    background = False
    diffFile = "/tmp/.pushover-history"
    bashHistoryFile = os.path.expanduser("~/.bash_history")

    def printLn(self, message):
        if self.quiet == False:
            print message

    def exit(self, code):
        self.printLn("")
        sys.exit(code)

    def usage(self):
        """
        Print Usage Information

        :return:
        """
        file = os.path.basename(__file__)
        print "Usage:   " + file + " [options]"
        print "Stdin:   " + file + " [options]"
        print ""
        print "  -u --user     <user id>             Pushover User-ID"
        print "  -t --token    <api token>           Pushover API-Token"
        print "  -p --priority <high, normal, low>   Default: normal"
        print "  -c --config   <path to file>        Default: " + self.configFile
        print "  -v --verbose                        Be verbose"
        print "  -q --quiet                          Be quiet"
        print "  -b --background                     Run in background"

    def printHeader(self):
        self.printLn("Command Line Pushover Client 0.2 by Markus Perl - https://github.com/markus-perl/pushover-cli")
        self.printLn("")

    def validate(self):

        if self.user == None:
            self.printLn('No user set')
            self.usage()
            self.exit(1)

        if self.token == None:
            self.printLn('No token set')
            self.usage()
            self.exit(1)

    def parseConfig(self):
        if os.path.isfile(self.configFile):
            ini_str = '[root]\n' + open(self.configFile, 'r').read()
            ini_fp = StringIO.StringIO(ini_str)
            config = ConfigParser.RawConfigParser()
            config.readfp(ini_fp)

            if config.has_option("root", "user"):
                self.user = config.get("root", "user")

            if config.has_option("root", "token"):
                self.token = config.get("root", "token")

            if config.has_option("root", "url"):
                self.url = config.get("root", "url")

            if config.has_option("root", "priority"):
                for name, priority in self.priorities.iteritems():
                    if name == config.get("root", "priority"):
                        self.priority = priority

            if config.has_option("root", "verbose"):
                if config.get("root", "verbose") in ("1", "On", "on"):
                    self.verbose = True

            if config.has_option("root", "quiet"):
                if config.get("root", "quiet") in ("1", "On", "on"):
                    self.verbose = True

    def main(self):
        """
        Main Method

        :return:
        """

        self.parseConfig()

        try:
            opts, args = getopt.getopt(sys.argv[1:], "hbqvu:t:p:u:c:l:",
                                       ["help", "user=", "token=", "priority=", "url=", "config=", "verbose", "quiet",
                                        "background"])
        except getopt.GetoptError as err:
            print str(err)
            self.printHeader()
            self.usage()
            self.exit(2)

        for o, a in opts:
            if o in ("-h", "--help"):
                self.printHeader()
                self.usage()
                self.exit(0)
            elif o in ("-v", "--verbose"):
                self.verbose = True
            elif o in ("-q", "--quiet"):
                self.quiet = True
            elif o in ("-b", "--background"):
                self.background = True
            elif o in ("-u", "--user"):
                self.user = a
            elif o in ("-t", "--token"):
                self.token = a
            elif o in ("-p", "--priority"):
                for name, priority in self.priorities.iteritems():
                    if name == a:
                        self.priority = priority

        self.printHeader()

        self.validate()

        if self.background:
            self.runBackground()
        else:
            if self.send() == False:
                self.exit(2)
            else:
                self.exit(0)

    def send(self):
        """
        Send the message

        :return:
        """
        if self.verbose:
            self.printLn("User: " + self.user)
            self.printLn("Token: " + self.token)
            self.printLn("Priority: " + str(self.priority))
            self.printLn("Url: " + str(self.url))
            self.printLn("Message: " + self.message)
            self.printLn("Title: " + self.title)

        diffFile = "/tmp/.pushover-history"
        bashHistoryFile = os.path.expanduser("~/.bash_history")

        if os.path.isfile(self.bashHistoryFile) == False:
            self.printLn("Bash history file " + bashHistoryFile + " not found")
            self.exit(2)

        if os.path.isfile(self.diffFile) == False:
            self.printLn("Initial bash history saving to " + diffFile)
            shutil.copy(self.bashHistoryFile, self.diffFile)
            return True

        count = 0
        self.message = "pushover-history " + socket.gethostname() + ":\n"
        diff = difflib.unified_diff(open(self.diffFile).readlines(), open(self.bashHistoryFile).readlines())
        for line in diff:
            if line[0] == "+" and line[:3] != "+++":
                self.message += line.strip()[1:] + "\n"
                count += 1

        if count:
            shutil.copy(self.bashHistoryFile, self.diffFile)

            conn = httplib.HTTPSConnection("api.pushover.net:443")
            conn.request("POST", "/1/messages.json",
                         urllib.urlencode({
                             "token": self.token,
                             "user": self.user,
                             "title": self.title,
                             "message": self.message,
                             "priority": self.priority,
                         }), {"Content-type": "application/x-www-form-urlencoded"})
            response = conn.getresponse()

            if response.status == 200:
                self.printLn("Message \"" + self.message + "\" sent successfully")
                return True
            else:
                self.printLn(response.reason)
                return False
        else:
            return True

    def runBackground(self):
        if os.path.isfile(self.diffFile):
            os.remove(self.diffFile)

        while 1:
            self.send()
            time.sleep(30)


if __name__ == "__main__":
    pushover = Pushover()
    pushover.main()
